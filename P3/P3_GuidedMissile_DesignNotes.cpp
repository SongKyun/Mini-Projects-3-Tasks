// GuidedMissile_DesignNotes

/*
    [ 구현 개요 ]
    
    유도 미사일 기능과 관련한 설계 방향과 주요 구현 사항을 정리한 문서입니다.

    1. 발사체의 유도 미사일 기능 구현
       - Missile 클래스는 목표(Monster)의 현재 위치를 std::atomic 또는 멀티스레드 안전성을 고려하여
         포인터로 참조하며, 매 프레임마다 목표 위치를 실시간으로 추적합니다.

       - 방향 벡터는 목표 위치와 미사일 위치의 차이로 계산하며,
         Normalize 후 속도와 deltaTime을 곱해 이동 방향을 조정합니다.

       - 목표와 미사일 간 거리가 0.5 이하가 되면 타격 성공으로 간주,
         목표의 상태를 '죽음'으로 변경하고 미사일은 파괴됩니다.

    2. 예외 상황 처리 내역
       - 목표가 nullptr이거나 이미 사망 상태일 경우, 미사일은 즉시 파괴 처리하여
         불필요한 연산과 메모리 낭비를 방지합니다.

       - 미사일은 수명(LifeTime)을 가지며, 제한 시간이 경과하면 자동으로 소멸합니다.

       - 목표가 죽은 상태일 때 중복 공격을 막기 위해 별도 조건을 둡니다.

    3. 정책 및 구현 방향
       - 미사일은 목표를 소유하지 않고 단순한 원시 포인터로 참조만 하며,
         소유권 문제를 피하기 위해 메인 함수에서 unique_ptr로 미사일과 목표를 각각 관리합니다.

       - 이동 방향과 랜덤 회피 방향은 std::mt19937 기반 <random> 라이브러리를 사용해
         안정적인 난수 생성과 다양한 회피 행동 구현에 활용했습니다.

       - 방향 조합 시, 목표 반대 방향과 랜덤 회피 방향의 가중치를 조절하여 자연스러운 움직임을 연출합니다.

       - Player, Monster, Missile 등 게임 내 주요 객체들은 상속과 다형성을 활용하여
         공통 기능은 부모 클래스에 두고, 개별 특성은 자식 클래스에서 구현함으로써
         코드 중복을 최소화하고 유지보수성을 높였습니다.

       - 이러한 객체지향적 설계는 향후 새로운 적, 무기, 효과 등 기능 추가 시
         기존 코드를 재사용하면서 쉽게 확장 가능하도록 설계되었습니다.

    4. 객체 소멸 및 예외 처리
       - 목표(Monster)와 미사일(Missile)은 각각 독립적인 unique_ptr로 소유권을 분리해
         메모리 해제 시점과 충돌을 방지했습니다.

       - 미사일 파괴 시 unique_ptr를 통해 안전하게 메모리 해제되며,
         목표 사망 감지 후 미사일 루프에서 즉시 파괴 처리합니다.

       - std::uniform_real_distribution<float> 와 std::mt19937를 정적 멤버로 선언하여
         난수 생성 비용 최소화 및 재사용성을 극대화하였습니다.

     5. 개선 사항 고려
       - 문제 요구사항에 맞춰 Player, Monster, Missile 클래스를 중심으로 최소 기능을 구현하였습니다.

       - 현재는 main 함수 내에서 게임 로직을 직접 제어하고 있으나,
         향후 확장성과 유지보수를 위해 GameManager 클래스를 도입해
         전체 게임 상태 관리, 객체 생성/소멸, 루프 제어 등을 담당하게 할 수 있습니다.

       - Missile 회전 로직은 간단한 선형 보간(LERP)을 사용하였으며,
         외적(Cross Product) 기반의 회전 방향 판단 알고리즘도 시도하였고,
         추후 고속 이동이나 회피 AI 개선 시 유용한 구조로 확장 가능합니다.

       - 회전 보간 계수(t)는 deltaTime에 기반해 회전 속도를 조절하며, overshoot 방지를 위해 clamp 처리하여 안정성을 높였습니다.

       - 이동 속도, 회전 속도, 명중 거리 등은 상수로 두기보다 외부 설정(GameConfig 등)에서 조절 가능하게 개선할 수 있습니다.
*/