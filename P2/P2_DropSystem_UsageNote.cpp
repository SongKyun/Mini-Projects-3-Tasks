// DropSystem_UsageNote.cpp

/*
	[ 구현한 내용이 실제 게임에서 어떤 식으로 사용될 지에 대해 설명 ]

	본 드랍 시스템은 몬스터마다 고유한 DropID와 플레이어의 직업(ClassType)을 기준으로
	확률 기반으로 적절한 아이템을 선택하여 리턴하는 구조입니다.

	실제 게임에서의 사용 흐름은 다음과 같습니다.

	1. 몬스터 처치 시 서버 또는 클라이언트에서 DropManager를 통해 드랍 아이템을 결정합니다.
		- DropManager::Get().GetRandomItem(DropID, PlayerClass)를 호출합니다.
		- 각 직업에 맞는 장비 또는 소비 아이템 등을 확률에 따라 드랍합니다.

	2. 각 DropInfo는 기획자가 제공한 외부 데이터(CSV/JSON 등)를 기반으로 구성됩니다.
		- 초기에는 코드 상에서 데이터를 직접 구성하지만,
		- 이후에는 외부 파일을 파싱하여 자동으로 Drop 테이블을 로드하는 구조로 확장 가능합니다.

	3. 확률 기반 아이템 드랍은 플레이어의 성장 동기 및 반복 콘텐츠의 재미 요소와 직결됩니다.
		- 희귀 아이템은 낮은 확률로 드랍하거나,
		- 클래스별 서로 다른 전용 아이템을 드랍하여 다양성을 제공합니다.

	4. 드랍 시스템 구조의 장점
		- 확률과 아이템 구성이 유연하게 확장 가능하여, 신규 클래스나 아이템 추가가 용이합니다.
		- 템플릿 기반 랜덤 선택기를 사용하여 확률 처리 로직이 재사용 가능하며,
		- 아이템뿐 아니라 스킬, 보상 등 다양한 데이터 타입에도 적용할 수 있습니다.
		- DropID 분리로 여러 몬스터별 드랍 테이블 관리가 가능해 유지보수가 쉽습니다.

	5. 실제 운영 게임에서 확장되는 부분
		- 기획 툴 연동	: Excel -> CSV/JSON -> 파싱 -> 게임 내 DropManager 반영합니다.
		- 난수 시드 고정	: 테스트, 리플레이, 로그 분석을 위해 RNG 시드 제어 가능합니다.
		- 서버 권한 처리	: 드랍 결과는 서버에서 결정 후 클라이언트에 전달하여 치트를 방지합니다.

	정리
		이 드랍 시스템은 게임 상황에 맞게 동적으로 아이템을 확률적으로 생성하며,
		구조화된 드랍 테이블과 범용적인 랜덤 선택기 덕분에 확장성과 재사용성이 뛰어납니다.
*/